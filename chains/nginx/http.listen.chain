     nginx.c:294 1-2 main中初始化cycle, in main call ngx_init_cycle
       ngx_http.c:333 1-1-5 in ngx_http_block nginx.conf 中 http block的解析逻辑 call ngx_http_optimize_servers
       ngx_http.c:1422 1-1-4 in ngx_http_optimize_servers call ngx_http_init_listening
       ngx_http.c:1668 1-1-3 in ngx_http_init_listening call  ngx_http_add_listening
       ngx_http.c:1715 1-1-2 in ngx_http_add_listening call ngx_create_listening
         ngx_http.c:1723 1-1-2+1 设置ls的handler 为 ngx_http_init_connection  in ngx_http_add_listening
       ngx_connection.c:27 1-1-1 in ngx_create_listening 在cycle->listening 上创建了一个新的ls
     ngx_cycle.c:617 1-1 in ngx_init_cycle call ngx_open_listening_sockets 开始监听端口
   ngx_connection.c:489 1 in ngx_open_listening_socketsc call ngx_socket 创建出socket
     ngx_connection.c:604 1+1 in ngx_open_listening_socketsc 调用bind
     ngx_connection.c:658 1+2 in ngx_open_listening_socketsc 调用listen
     ngx_connection.c:693 1+3 in ngx_open_listening_socketsc 设置ls[i].fd为我们的s socket
       ngx_event.c:843 2-1-3 c = ngx_get_connection(ls[i].fd  in ngx_event_process_init
         ngx_connection.c:1163 2-1-3+1 c->read->data=c 设置connection的read的data指针为自己  in ngx_get_connection
       ngx_event.c:853 2-1-2 c->listening = &ls[i]; in ngx_event_process_init
       ngx_event.c:927 2-1-1 将连接的read事件handle设置为 ngx_event_accept  in ngx_event_process_init
     ngx_event.c:962 2-1 in ngx_event_process_init 将事件加入到epol中去,这个事件代表可以accept,handle是ngx_accept_evne
   ngx_event_accept.c:62 2 in ngx_event_accept 调用accept 拿到一个代表新连接的s
     ngx_event_accept.c:146 2+1 in ngx_event_accept 用s调用ngx_get_connection 拿到nginx中一个代表这个新连接的ngx_conn对象
     ngx_event_accept.c:318 2+2 in ngx_event_accept 用c调用ngx_add_conn
     ngx_event_accept.c:329 2+3 in ngx_event_accept 调用ls->handler(c).ls 是ev->data->listening
       ngx_http_request.c:235 2+3+1 设置 conn的data为新创的ngx_http_connection in ngx_http_init_connection
       ngx_http_request.c:334 2+3+2 设置conn的read时间的hendle为ngx_http_wait_request_handler，这就是http处理的开始